<?xml version="1.0" encoding="UTF-8"?>
<!-- scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
	debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration debug="false" scan="true" scanPeriod="30 seconds">  
	<!-- <include resource="org/springframework/boot/logging/logback/base.xml"/> -->    
    <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, -->      
    <!-- appender是configuration的子节点，是负责写日志的组件。 -->  
    <!-- ConsoleAppender：把日志输出到控制台 -->  
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">      
        <encoder>      
            <!-- <pattern>[%d]-[%p] (%file:%line\)- %m%n</pattern> -->    
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}]-%level-[%thread]-[biz:%X{biz_seq_no}][sys:%X{sys_seq_no}][%class-%method-%L][%marker][%m]%n</pattern>    
            <!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码   -->
            <charset>UTF-8</charset>     
        </encoder>
        <!-- <layout class="ch.qos.logback.classic.PatternLayout">[%file:%line]  %method:[%file:%line]
            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} %method[%L]: -%msg%n
            [%d{yyyy-MM-dd HH:mm:ss.SSS}]-%level-[%thread]-[biz:%X{biz_seq_no}][sys:%X{sys_seq_no}][%class-%method-%L][%marker][%m]%n
            </Pattern>
        </layout> -->      
    </appender>      
    <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->  
    <!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log -->  
    <!--             2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名-->  
    <appender name="demolog" class="ch.qos.logback.core.rolling.RollingFileAppender">      
        <File>${LOG_PATH}/demo.log</File>      
        <!-- <File>${logging,path}/demo.log</File>  -->     
        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->  
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">      
            <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->  
            <!-- 文件名：log/demo.2017-12-05.0.log -->  
            <fileNamePattern>${LOG_PATH}/demo.%d.%i.log</fileNamePattern>   
            <!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->   
            <maxHistory>30</maxHistory>     
            <timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">      
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 -->    
                <maxFileSize>1KB</maxFileSize>      
            </timeBasedFileNamingAndTriggeringPolicy>      
        </rollingPolicy>      
        <encoder>      
            <!-- pattern节点，用来设置日志的输入格式 -->  
            <pattern>      
                %d %p (%file:%line\)- %m%n    
            </pattern>      
            <!-- 记录日志的编码:此处设置字符集 - -->  
            <charset>UTF-8</charset>  
        </encoder>      
    </appender>      
    <!-- 控制台输出日志级别 -->  
    <root level="info">      
        <appender-ref ref="STDOUT" />      
        <appender-ref ref="demolog" />      
    </root>      
    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->  
    <!-- MySpringBoot.parentDemo为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->  
    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->  
    <!-- <logger name="MySpringBoot.parentDemo" level="DEBUG">      
        <appender-ref ref="demolog" />      
    </logger> -->      
</configuration> 